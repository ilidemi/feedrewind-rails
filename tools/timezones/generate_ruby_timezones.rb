require 'json'
require 'tzinfo'
require 'set'

# From https://github.com/vvo/tzdb/blob/main/raw-time-zones.json
File.open("raw-time-zones.json") do |file|
  json = JSON.parse(file.read)

  Override = Struct.new(
    :name, :friendly_name, :short_friendly_prefix_name, :short_friendly_suffix_name, :short_friendly_name
  )
  overrides = {
    "Pacific/Kanton" => Override.new(
      "Pacific/Enderbury",
      "+13:00 Phoenix Islands Time - Endenbury",
      "+13:00 Phoenix Islands Time",
      "Phoenix Islands Time (+13:00)",
      "Phoenix Islands Time"
    )
  }

  File.open("out_timezone_helper.rb", "wb") do |out_file|
    out_file.write("module TimezoneHelper\n")
    out_file.write("  # Generated by tools/timezones/generate_ruby_timezone.rb\n\n")

    tz_to_group_id_lines = []
    group_id_to_short_friendly_prefix_name_lines = []
    group_id_to_short_friendly_name_lines = []
    group_id_to_short_friendly_suffix_name_lines = []

    tzdb_groups = Set.new
    out_file.write("  FRIENDLY_NAME_BY_GROUP_ID = {\n")
    json.each do |row|
      if overrides.include?(row["name"])
        name = overrides[row["name"]].name
        friendly_name = overrides[row["name"]].friendly_name
        short_friendly_prefix_name = overrides[row["name"]].short_friendly_prefix_name
        short_friendly_suffix_name = overrides[row["name"]].short_friendly_suffix_name
        short_friendly_name = overrides[row["name"]].short_friendly_name
      else
        name = row["name"]
        friendly_name = row["rawFormat"]
        offset = row["rawOffsetInMinutes"]
        offset_sign = offset >= 0 ? "+" : "-"
        offset_hours = (offset.abs / 60).to_s.rjust(2, "0")
        offset_minutes = (offset.abs % 60).to_s.rjust(2, "0")
        short_friendly_prefix_name = "#{offset_sign}#{offset_hours}:#{offset_minutes} #{row["alternativeName"]}"
        short_friendly_suffix_name = "#{row["alternativeName"]} (#{offset_sign}#{offset_hours}:#{offset_minutes})"
        short_friendly_name = row["alternativeName"]
      end
      tzdb_groups << name
      out_file.write("    \"#{name}\" => \"#{friendly_name}\",\n")

      group_id_to_short_friendly_prefix_name_lines << "\"#{name}\":\"#{short_friendly_prefix_name}\""
      group_id_to_short_friendly_suffix_name_lines << "\"#{name}\":\"#{short_friendly_suffix_name}\""
      group_id_to_short_friendly_name_lines << "\"#{name}\":\"#{short_friendly_name}\""
    end
    out_file.write("  }\n\n")

    tzdb_timezones = Set.new
    out_file.write("  GROUP_ID_BY_TIMEZONE_ID = {\n")
    json.each do |row|
      row["group"].each do |timezone|
        next if tzdb_timezones.include?(timezone)
        tzdb_timezones << timezone
        name = overrides.include?(row["name"]) ? overrides[row["name"]].name : row["name"]
        out_file.write("    \"#{timezone}\" => \"#{name}\",\n")

        tz_to_group_id_lines << "\"#{timezone}\":\"#{name}\""
      end
    end
    out_file.write("  }\n\n")

    out_file.write("  SHORT_FRIENDLY_PREFIX_NAME_BY_GROUP_ID_JSON = \"{#{group_id_to_short_friendly_prefix_name_lines.join(",").gsub('"', '\"')}}\"\n\n")
    out_file.write("  SHORT_FRIENDLY_SUFFIX_NAME_BY_GROUP_ID_JSON = \"{#{group_id_to_short_friendly_suffix_name_lines.join(",").gsub('"', '\"')}}\"\n\n")
    out_file.write("  SHORT_FRIENDLY_NAME_BY_GROUP_ID_JSON = \"{#{group_id_to_short_friendly_name_lines.join(",").gsub('"', '\"')}}\"\n\n")
    out_file.write("  GROUP_ID_BY_TIMEZONE_ID_JSON = \"{#{tz_to_group_id_lines.join(",").gsub('"', '\"')}}\"\n\n")

    out_file.write(<<-'RUBY'
  TZInfo::Timezone.all_country_zone_identifiers.each do |timezone|
    unless GROUP_ID_BY_TIMEZONE_ID.include?(timezone)
      Rails.logger.warn("#{timezone} from tzinfo is not in tzdb")
    end
  end

  TZINFO_ALL_TIMEZONES = TZInfo::Timezone.all_identifiers.to_set
  FRIENDLY_NAME_BY_GROUP_ID.each_key do |timezone|
    unless TZINFO_ALL_TIMEZONES.include?(timezone)
      Rails.logger.warn("#{timezone} group from tzdb is not in tzinfo")
    end
  end
end
    RUBY
    )

    TZInfo::Timezone.all_country_zone_identifiers.each do |timezone|
      unless tzdb_timezones.include?(timezone)
        puts "WARNING: #{timezone} from tzinfo is not in tzdb"
      end
    end

    tzinfo_all_timezones = TZInfo::Timezone.all_identifiers.to_set
    tzdb_groups.each do |timezone|
      unless tzinfo_all_timezones.include?(timezone)
        puts "WARNING: #{timezone} group from tzdb is not in tzinfo"
      end
    end
  end
end
