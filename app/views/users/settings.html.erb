<div class="flex flex-col gap-6">
  <div class="flex flex-col gap-1">
    <div>
      <%= link_to "← Dashboard",
                  subscriptions_path,
                  class: "text-sm link-secondary" %>
    </div>
    <h2>Settings</h2>
  </div>

  <div class="flex flex-col gap-6">
    <div class="flex flex-col gap-1">
      <div class="flex flex-row gap-[0.3125rem] items-center">
        <div class="font-semibold">Time zone</div>
        <div id="timezone_save_spinner" class="spinner spinner-light hidden"></div>
      </div>
      <%= select_tag "timezone",
                     options_for_select(@timezone_options, @selected_option),
                     class: "border border-gray-300 rounded-md max-w-full"
      %>
      <div id="timezone_suggestion" class="hidden">
        <!-- @formatter:off -->
        (This device is on <button id="client_timezone" class="link"></button>)
        <!-- @formatter:on -->
      </div>
    </div>
    <div id="future_timezone" class="hidden">Entries will be arriving in early mornings <span id="future_timezone_name"></span>.</div>

    <script>
        const clientTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        const clientOffset = new Date().getTimezoneOffset();

        const shortFriendlyPrefixNameByGroupId = <%= TimezoneHelper::SHORT_FRIENDLY_PREFIX_NAME_BY_GROUP_ID_JSON.html_safe %>;
        const shortFriendlyNameByGroupId = <%= TimezoneHelper::SHORT_FRIENDLY_NAME_BY_GROUP_ID_JSON.html_safe %>;
        const groupIdByTimezoneId = <%= TimezoneHelper::GROUP_ID_BY_TIMEZONE_ID_JSON.html_safe %>;

        let timezoneRequestsInFlight = 0;
        let maxSeenVersion = <%= @user_settings.version %>;

        function showSpinner() {
            timezoneRequestsInFlight++;
            let spinner = document.getElementById("timezone_save_spinner");
            spinner.classList.remove("hidden");
        }

        function maybeHideSpinner() {
            timezoneRequestsInFlight--;
            if (timezoneRequestsInFlight === 0) {
                let spinner = document.getElementById("timezone_save_spinner");
                spinner.classList.add("hidden");
            }
        }

        const timezoneSelect = document.getElementById("timezone");
        timezoneSelect.addEventListener("change", async () => {
            let newTimezone = document.getElementById("timezone").value;
            showSpinner();
            maxSeenVersion += 1;
            const requestVersion = maxSeenVersion;

            try {
                const abortController = new AbortController();
                const timeoutId = setTimeout(() => abortController.abort(), 30000);
                let formData = new FormData();
                formData.append("timezone", newTimezone);
                formData.append("client_timezone", clientTimezone); // Just for logging
                formData.append("client_offset", clientOffset.toString()); // Just for logging
                formData.append("version", requestVersion);
                const body = new URLSearchParams(formData);
                const response = await fetch(
                    "settings/save_timezone",
                    {
                        method: "post",
                        headers: {
                            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                        },
                        body: body,
                        signal: abortController.signal
                    }
                );

                if (response.status === 200) {
                    clearTimeout(timeoutId);
                    maybeHideSpinner();
                    updateLabels();
                } else if (response.status === 409) {
                    const json = await response.json();
                    clearTimeout(timeoutId);
                    maybeHideSpinner();
                    if (json.version >= maxSeenVersion) {
                        showRefreshPopup("Settings are out of date. Please refresh the page.");
                    }
                    // If the version is older, we're expecting some other request to succeed
                } else {
                    clearTimeout(timeoutId);
                    maybeHideSpinner();
                    if (requestVersion === maxSeenVersion) {
                        showRefreshPopup("Something went wrong. Please refresh the page.");
                    }
                    // If the version is older, we're expecting some other request to succeed
                }
            } catch (err) {
                // Timeout
                maybeHideSpinner();
                showRefreshPopup("Something went wrong. Please refresh the page.");
            }
        });

        const timezoneSuggestion = document.getElementById("timezone_suggestion");
        let clientTimezoneGroupId;

        timezoneSuggestion.addEventListener("click", () => {
            timezoneSuggestion.classList.add("hidden");
            timezoneSelect.value = clientTimezoneGroupId;
            timezoneSelect.dispatchEvent(new Event('change'));
        });

        function updateLabels() {
            if (groupIdByTimezoneId.hasOwnProperty(clientTimezone) &&
                timezoneSelect.value !== groupIdByTimezoneId[clientTimezone]
            ) {
                clientTimezoneGroupId = groupIdByTimezoneId[clientTimezone];
                document.getElementById("client_timezone").innerText =
                    shortFriendlyPrefixNameByGroupId[clientTimezoneGroupId];
                timezoneSuggestion.classList.remove("hidden");
            }

            const futureTimezoneName = document.getElementById("future_timezone_name");
            // Select is guaranteed to have every value from the friendly names map, but the friendly names
            // map may not have a weird tz that user had on signup and we have to display here. Hence fallback
            if (shortFriendlyNameByGroupId.hasOwnProperty(timezoneSelect.value)) {
                futureTimezoneName.innerText = shortFriendlyNameByGroupId[timezoneSelect.value];
            } else {
                futureTimezoneName.innerText = timezoneSelect.value;
            }
            document.getElementById("future_timezone").classList.remove("hidden");
        }
        updateLabels();
    </script>
  </div>
</div>