<%= render partial: "common/refresh_popup" %>

<script>
    {
        <% if client_token %>
        // noinspection JSAnnotator
        let clientToken = "<%= client_token %>";
        <% else %>
        // noinspection JSAnnotator
        let clientToken = null;
        <% end %>
        let epoch;
        let epochTimestamp;
        let epochDurations = [];

        function createRect(classes) {
            let rect = document.createElement("div");
            rect.className = classes;
            return rect;
        }

        function displayProgress(data) {
            if (data.hasOwnProperty("epoch") && (!epoch || data.epoch > epoch)) {
                epoch = data.epoch;
                let newEpochTimestamp = Date.now() / 1000;
                if (epoch > 0) {
                    if (epochTimestamp) {
                        epochDurations.push(newEpochTimestamp - epochTimestamp);
                    } else {
                        epochDurations.push(0);
                    }
                }
                epochTimestamp = newEpochTimestamp;
                while (epochDurations.length < epoch) {
                    epochDurations.push(0);
                }

                if (data.hasOwnProperty("status")) {
                    let rects = [];
                    let matches = [...data.status.matchAll(/pP|p|hF\d*|h/g)];
                    let tokens = matches.map(match => match[0]);
                    let firstDarkIndex = tokens.length;
                    for (let index = tokens.length - 1; index >= 0; index--) {
                        if (!tokens[index].startsWith("hF")) break;
                        firstDarkIndex = index;
                    }
                    let needsTrailingLoader = true;
                    let trailingLoaderIsDark = false;
                    for (let index in tokens) {
                        let token = tokens[index];
                        if (token === "h") {
                            rects.push(createRect("w-5 h-5 rounded-sm bg-slate-400"));
                        } else if (token === "p") {
                            rects.push(createRect("w-[4.25rem] h-5 rounded-sm border border-slate-400 loader-41"));
                            needsTrailingLoader = false;
                        } else if (token === "pP") {
                            rects.push(createRect("w-[4.25rem] h-5 rounded-sm bg-slate-400"));
                        } else if (token.startsWith("hF")) {
                            if (index >= firstDarkIndex) {
                                rects.push(createRect("w-5 h-5 rounded-sm bg-slate-600"));
                                if (parseInt(index) === tokens.length - 1) {
                                    let remainingCountMatch = token.match(/\d+$/g);
                                    if (remainingCountMatch) {
                                        needsTrailingLoader = false;
                                        let remainingCount = parseInt(remainingCountMatch[0]);
                                        if (remainingCount >= 1) {
                                            rects.push(createRect("w-5 h-5 rounded-sm border border-slate-600 loader-41-dark"))
                                        }
                                        for (let i = 1; i < remainingCount; i++) {
                                            rects.push(createRect("w-5 h-5 rounded-sm border border-slate-600"));
                                        }
                                    }
                                } else {
                                    trailingLoaderIsDark = true;
                                }
                            } else {
                                rects.push(createRect("w-5 h-5 rounded-sm bg-slate-400"));
                            }
                        } else {
                            console.warn(`Unknown progress token: ${token} (${data})`);
                        }
                    }
                    if (needsTrailingLoader) {
                        if (trailingLoaderIsDark) {
                            rects.push(createRect("w-5 h-5 rounded-sm border border-slate-600 loader-41-dark"));
                        } else {
                            rects.push(createRect("w-5 h-5 rounded-sm border border-slate-400 loader-41"));
                        }
                    }
                    document.getElementById("progress_rects").replaceChildren(...rects);
                }

                if (data.hasOwnProperty("count")) {
                    if (data.count) {
                        document.getElementById("progress_count").innerHTML = `Discovering posts: ${data.count}`;
                    } else {
                        document.getElementById("progress_count").innerHTML = "Discovering posts...";
                    }
                }
            }

            if (data.done) {
                let epochDurationsStr = epochDurations
                    .map(t => t.toFixed(3))
                    .join(";");
                let formData = new FormData();
                formData.append(
                    document.querySelector('meta[name="csrf-param"]').content,
                    document.querySelector('meta[name="csrf-token"]').content
                );
                formData.append("client_token", clientToken);
                formData.append("epoch_durations", epochDurationsStr);
                fetch(
                    "./submit_progress_times", {
                        method: "POST",
                        body: formData
                    }
                );

                // Reload the page
                Turbolinks.visit(window.location);
            }
        }

        let [subscription, monitor] = window.discoverySubscribe("<%= blog.id %>", data => {
            displayProgress(data);
        });

        function secondsSince(time) {
            return (new Date().getTime() - time) / 1e3;
        }

        let stalenessTimeoutId = undefined;
        function checkConnectionStaleness() {
            if (secondsSince(monitor.pingedAt ? monitor.pingedAt : monitor.startedAt) >= 30) {
                triggerRefreshPopup("Connection was lost. Please refresh the page.");
            } else {
                stalenessTimeoutId = setTimeout(() => checkConnectionStaleness(), 1000);
            }
        }

        checkConnectionStaleness();

        document.addEventListener('turbolinks:before-render', () => {
            if (stalenessTimeoutId) {
                clearTimeout(stalenessTimeoutId);
            }
            window.discoveryUnsubscribe(subscription)
        });
    }
</script>

<div class="flex flex-col gap-8">
  <div class="flex flex-col gap-2">
    <div id="progress_count">
      <% unless blog_crawl_progress.count %>
        Discovering posts...
      <% end %>
    </div>

    <span id="progress_rects" class="flex flex-row flex-wrap gap-1"></span>
  </div>

  <script>
      displayProgress({
          <% if blog_crawl_progress.count %>
          count: "<%= blog_crawl_progress.count %>",
          <% end %>
          <% if blog_crawl_progress.progress %>
          status: "<%= blog_crawl_progress.progress %>",
          <% end %>
          epoch: <%= blog_crawl_progress.epoch %>
      })
  </script>

  <div>
    <button id="cancel_button" class="btn-secondary-red">
      Cancel
    </button>
  </div>

  <%= render partial: "delete_subscription_popup",
             locals: {
               trigger_button_id: "cancel_button",
               id_suffix: "",
               prompt_prefix: "Cancel adding ",
               prompt_suffix: "?",
               keep_label: "Keep",
               delete_label: "Cancel",
               subscription: subscription
             }
  %>
</div>