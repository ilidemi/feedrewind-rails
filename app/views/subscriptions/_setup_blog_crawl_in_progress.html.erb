<%= render partial: "common/refresh_popup" %>

<script>
    <% if client_token %>
    // noinspection JSAnnotator
    let crawlClientToken = "<%= client_token %>";
    <% else %>
    // noinspection JSAnnotator
    let crawlClientToken = null;
    <% end %>
    let crawlEpoch;
    let crawlEpochTimestamp;
    let crawlEpochDurations = [];
    let crawlWasDone = false;

    function createProgressRect(classes) {
        let rect = document.createElement("div");
        rect.className = classes;
        return rect;
    }

    function displayProgress(data) {
        if (data.hasOwnProperty("epoch") && (!crawlEpoch || data.epoch > crawlEpoch)) {
            crawlEpoch = data.epoch;
            let newEpochTimestamp = Date.now() / 1000;
            if (crawlEpoch > 0) {
                if (crawlEpochTimestamp) {
                    crawlEpochDurations.push(newEpochTimestamp - crawlEpochTimestamp);
                } else {
                    crawlEpochDurations.push(0);
                }
            }
            crawlEpochTimestamp = newEpochTimestamp;
            while (crawlEpochDurations.length < crawlEpoch) {
                crawlEpochDurations.push(0);
            }

            if (crawlEpoch > 0 && data.hasOwnProperty("status") && data.status !== null) {
                let rects = [];
                let matches = [...data.status.matchAll(/pP|p|hF\d*|h/g)];
                let tokens = matches.map(match => match[0]);

                let lastTrailingDarkIndex = tokens.length;
                if (tokens.length > 0 && tokens[tokens.length - 1].startsWith("hF")) {
                    lastTrailingDarkIndex = tokens.length - 1;
                }
                let firstTrailingDarkIndex = tokens.length;

                for (let index = tokens.length - 1; index >= 0; index--) {
                    if (!tokens[index].startsWith("hF")) break;
                    firstTrailingDarkIndex = index;
                }

                let needsTrailingLoader = true;
                let trailingLoaderIsDark = false;

                for (let index in tokens) {
                    let token = tokens[index];
                    if (token === "h") {
                        rects.push(createProgressRect("w-5 h-5 rounded-sm bg-slate-400"));
                    } else if (token === "p") {
                        rects.push(createProgressRect("w-[4.25rem] h-5 rounded-sm border border-slate-400 loader-41"));
                        needsTrailingLoader = false;
                    } else if (token === "pP") {
                        rects.push(createProgressRect("w-[4.25rem] h-5 rounded-sm bg-slate-400"));
                    } else if (token.startsWith("hF")) {
                        if (index >= firstTrailingDarkIndex &&
                            firstTrailingDarkIndex !== lastTrailingDarkIndex
                        ) {
                            rects.push(createProgressRect("w-5 h-5 rounded-sm bg-slate-600"));
                            if (parseInt(index) === tokens.length - 1) {
                                let remainingCountMatch = token.match(/\d+$/g);
                                if (remainingCountMatch) {
                                    needsTrailingLoader = false;
                                    let remainingCount = parseInt(remainingCountMatch[0]);
                                    if (remainingCount >= 1) {
                                        rects.push(createProgressRect("w-5 h-5 rounded-sm border border-slate-600 loader-41-dark"))
                                    }
                                    for (let i = 1; i < remainingCount; i++) {
                                        rects.push(createProgressRect("w-5 h-5 rounded-sm border border-slate-600"));
                                    }
                                }
                            } else {
                                trailingLoaderIsDark = true;
                            }
                        } else {
                            rects.push(createProgressRect("w-5 h-5 rounded-sm bg-slate-400"));
                        }
                    } else {
                        console.warn(`Unknown progress token: ${token} (${data})`);
                    }
                }
                if (needsTrailingLoader) {
                    if (trailingLoaderIsDark) {
                        rects.push(createProgressRect("w-5 h-5 rounded-sm border border-slate-600 loader-41-dark"));
                    } else {
                        rects.push(createProgressRect("w-5 h-5 rounded-sm border border-slate-400 loader-41"));
                    }
                }
                document.getElementById("progress_rects").replaceChildren(...rects);
            } else if (crawlEpoch === 0) {
                document
                    .getElementById("progress_rects")
                    .replaceChildren(createProgressRect("w-5 h-5 rounded-sm border border-slate-400 loader-41"));
            }

            if (data.hasOwnProperty("count")) {
                if (data.count) {
                    document.getElementById("progress_count").innerHTML = `Discovering posts: ${data.count}`;
                } else {
                    document.getElementById("progress_count").innerHTML = "Discovering posts...";
                }
            }
        }

        if (data.done) {
            if (crawlWasDone) return;

            crawlWasDone = true;
            let epochDurationsStr = crawlEpochDurations
                .map(t => t.toFixed(3))
                .join(";");
            let formData = new FormData();
            formData.append(
                document.querySelector('meta[name="csrf-param"]').content,
                document.querySelector('meta[name="csrf-token"]').content
            );
            formData.append("client_token", crawlClientToken);
            formData.append("epoch_durations", epochDurationsStr);
            fetch(
                "./submit_progress_times", {
                    method: "POST",
                    body: formData
                }
            );

            window.location.reload();
        }
    }

    let shouldPollProgress = true;
    let [subscription, monitor] = window.discoverySubscribe("<%= blog.id %>", data => {
        shouldPollProgress = false;
        displayProgress(data);
    });

    async function pollProgressTillWebsocketStarts() {
        if (shouldPollProgress) return;

        const response = await fetch(
            "<%= SubscriptionsHelper.progress_path(subscription) %>",
            {
                method: "post",
                headers: {
                    "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                }
            }
        );
        const body = await response.json();
        console.log(`Poll: ${JSON.stringify(body)}`);
        displayProgress(body);

        setTimeout(() => pollProgressTillWebsocketStarts(), 100);
    }

    pollProgressTillWebsocketStarts();

    function secondsSince(time) {
        return (new Date().getTime() - time) / 1e3;
    }

    let crawlStalenessTimeoutId = undefined;

    function checkWebsocketStaleness() {
        if (secondsSince(monitor.pingedAt ? monitor.pingedAt : monitor.startedAt) >= 30) {
            triggerRefreshPopup("Connection was lost. Please refresh the page.");
        } else {
            crawlStalenessTimeoutId = setTimeout(() => checkWebsocketStaleness(), 1000);
        }
    }

    checkWebsocketStaleness();

    window.addEventListener('beforeunload', () => {
        if (crawlStalenessTimeoutId) {
            clearTimeout(crawlStalenessTimeoutId);
        }
        window.discoveryUnsubscribe(subscription);
        shouldPollProgress = false;
    });
</script>

<div class="flex flex-col gap-8">
  <div class="flex flex-col gap-2">
    <div id="progress_count">
      <% unless blog_crawl_progress.count %>
        Discovering posts...
      <% end %>
    </div>

    <span id="progress_rects" class="flex flex-row flex-wrap gap-1"></span>
  </div>

  <script>
      displayProgress({
          <% if blog_crawl_progress.count %>
          count: "<%= blog_crawl_progress.count %>",
          <% end %>
          <% if blog_crawl_progress.progress %>
          status: "<%= blog_crawl_progress.progress %>",
          <% end %>
          epoch: <%= blog_crawl_progress.epoch %>
      })
  </script>

  <div>
    <button id="cancel_button" class="btn-secondary-red">
      Cancel
    </button>
  </div>

  <%= render partial: "delete_subscription_popup",
             locals: {
               trigger_button_id: "cancel_button",
               id_suffix: "",
               prompt_prefix: "Cancel adding ",
               prompt_suffix: "?",
               keep_label: "Keep",
               delete_label: "Cancel",
               subscription: subscription
             }
  %>
</div>