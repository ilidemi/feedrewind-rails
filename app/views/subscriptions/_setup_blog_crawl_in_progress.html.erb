<style>
    .progress_page {
        width: 1em;
        height: 1em;
        border-width: 1px;
        border-style: solid;
        display: inline-block;
        margin-left: 2px;
        margin-right: 2px;
    }

    .progress_long_page {
        width: calc(3em + 12px); /* include gaps and borders */
        height: 1em;
        border-width: 1px;
        border-style: solid;
        display: inline-block;
        margin-left: 2px;
        margin-right: 2px;
    }

    .progress_long_page_start {
        width: calc(1.5em + 6px); /* include gaps and borders */
        height: 1em;
        border-width: 1px;
        border-style: solid;
        border-image-slice: 1;
        border-image-source: linear-gradient(to right, gray, #80808000);
        background: linear-gradient(to right, silver, #c0c0c000);
        background-origin: border-box;
        display: inline-block;
        margin-left: 2px;
        margin-right: 2px;
    }

    .progress_regular {
        background-color: silver;
        border-color: gray;
    }

    .progress_finishing {
        background-color: tomato;
        border-color: orangered;
    }

    .progress_page_remaining {
        width: 1em;
        height: 1em;
        border-width: 1px;
        border-style: solid;
        border-color: transparent;
        display: inline-block;
        background-color: whitesmoke;
        margin-left: 2px;
        margin-right: 2px;
    }
</style>

<script>
    {
        <% if client_token %>
        // noinspection JSAnnotator
        let clientToken = "<%= client_token %>";
        <% else %>
        // noinspection JSAnnotator
        let clientToken = null;
        <% end %>
        let epoch;
        let epochTimestamp;
        let epochDurations = [];

        function createRect(classes) {
            let rect = document.createElement("div");
            rect.className = classes;
            return rect;
        }

        function displayProgress(data) {
            if (data.hasOwnProperty("epoch") && (!epoch || data.epoch > epoch)) {
                epoch = data.epoch;
                let newEpochTimestamp = Date.now() / 1000;
                if (epoch > 0) {
                    if (epochTimestamp) {
                        epochDurations.push(newEpochTimestamp - epochTimestamp);
                    } else {
                        epochDurations.push(0);
                    }
                }
                epochTimestamp = newEpochTimestamp;
                while (epochDurations.length < epoch) {
                    epochDurations.push(0);
                }

                if (data.hasOwnProperty("status")) {
                    let rects = [];
                    let tokens = [...data.status.matchAll(/pP|p|hF\d*|h/g)];
                    for (let index in tokens) {
                        let token = tokens[index];
                        if (token[0] === "h") {
                            rects.push(createRect("progress_page progress_regular"));
                        } else if (token[0] === "p") {
                            rects.push(createRect("progress_long_page_start"));
                        } else if (token[0] === "pP") {
                            rects.push(createRect("progress_long_page progress_regular"));
                        } else if (token[0].startsWith("hF")) {
                            rects.push(createRect("progress_page progress_finishing"));
                            if (parseInt(index) === tokens.length - 1) {
                                let remainingCountMatch = token[0].match(/\d+$/g);
                                if (remainingCountMatch) {
                                    let remainingCount = parseInt(remainingCountMatch[0]);
                                    for (let i = 0; i < remainingCount; i++) {
                                        rects.push(createRect("progress_page_remaining"));
                                    }
                                }
                            }
                        } else {
                            console.warn(`Unknown progress token: ${token} (${data})`);
                        }
                    }
                    document.getElementById("progress_rects").replaceChildren(...rects);
                }

                if (data.hasOwnProperty("count")) {
                    if (data.count) {
                        document.getElementById("progress_count").innerHTML = `Discovering posts: ${data.count}`;
                    } else {
                        document.getElementById("progress_count").innerHTML = "Discovering posts...";
                    }
                }
            }

            if (data.done) {
                let epochDurationsStr = epochDurations
                    .map(t => t.toFixed(3))
                    .join(";");
                let formData = new FormData();
                formData.append(
                    document.querySelector('meta[name="csrf-param"]').content,
                    document.querySelector('meta[name="csrf-token"]').content
                );
                formData.append("client_token", clientToken);
                formData.append("epoch_durations", epochDurationsStr);
                fetch(
                    "./submit_progress_times", {
                        method: "POST",
                        body: formData
                    }
                );

                // Reload the page
                Turbolinks.visit(window.location);
            }
        }

        let subscription = window.discoverySubscribe("<%= blog.id %>", data => {
            displayProgress(data);
        });
        document.addEventListener('turbolinks:before-render', () => {
            window.discoveryUnsubscribe(subscription)
        });
    }
</script>

<div id="progress_count">
  <% unless blog_crawl_progress.count %>
    Discovering posts...
  <% end %>
</div>
<span id="progress_rects"></span>
<script>displayProgress({
    <% if blog_crawl_progress.count %>
    count: "<%= blog_crawl_progress.count %>",
    <% end %>
    <% if blog_crawl_progress.progress %>
    status: "<%= blog_crawl_progress.progress %>",
    <% end %>
    epoch: <%= blog_crawl_progress.epoch %>
})</script>
<br>
<br>
<%= button_to "Cancel", subscription_path(subscription),
              method: :delete,
              data: { confirm: "Cancel adding #{subscription.name}?" }
%>