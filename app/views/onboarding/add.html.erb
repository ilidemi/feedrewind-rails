<div class="flex flex-col gap-6 max-w-lg">
  <div class="flex flex-col gap-1">
    <div>
      <% if @current_user %>
        <%= link_to "← Dashboard",
                    subscriptions_path,
                    class: "text-sm link-secondary"
        %>
      <% else %>
        <%= link_to "← Main page",
                    root_path,
                    class: "text-sm link-secondary"
        %>
      <% end %>
    </div>

    <h2>Add Blog</h2>
  </div>

  <%= form_with url: "/subscriptions/discover_feeds",
                method: :post,
                local: false,
                id: "discover_form" do |form|
  %>
    <div class="flex flex-row w-full">
      <%= form.url_field :start_url,
                         value: @feeds_data&.start_url,
                         placeholder: "Feed or blog link",
                         autocomplete: "off",
                         class: "border border-slate-700 rounded-l-md w-full focus:ring-transparent focus:shadow-none"
      %>
      <button id="discover_go"
              type="submit"
              class="btn-no-disable rounded-l-none border border-slate-700 rounded-r-md focus:ring-1 focus:ring-offset-1 focus:ring-indigo-500 focus:outline-none relative"
      >
        <div id="discover_go_label">Go</div>
        <div id="discover_spinner" class="absolute-center hidden">
          <div class="spinner spinner-dark"></div>
        </div>
      </button>
      <script>
          function showSpinner() {
              const button = document.getElementById("discover_go");
              button.classList.add("disabled");
              const label = document.getElementById("discover_go_label");
              label.classList.add("invisible");
              const spinner = document.getElementById("discover_spinner");
              spinner.classList.remove("hidden");
              void spinner.offsetWidth; // trigger reflow
          }

          function hideSpinner() {
              const button = document.getElementById("discover_go");
              button.classList.remove("disabled");
              const label = document.getElementById("discover_go_label");
              label.classList.remove("invisible");
              const spinner = document.getElementById("discover_spinner");
              spinner.classList.add("hidden");
          }

          function disableFeedButton(button) {
              button.disabled = true;
              if (button.classList.contains("feeds-choose-btn")) {
                  button.classList.add("opacity-50");
              } else {
                  button.classList.remove("text-black");
                  button.classList.remove("link");
                  button.classList.add("text-gray-500");
              }
          }

          const discoverButton = document.getElementById("discover_go");

          discoverButton.addEventListener("click", async (event) => {
              event.preventDefault();
              if (discoverButton.disabled) {
                  return;
              }

              discoverButton.disabled = true;
              showSpinner();
              document.getElementById("feeds").innerHTML = "";
              let suggestions = document.getElementById("suggestions");
              if (suggestions) {
                  suggestions.innerHTML = "";
              }

              try {
                  const abortController = new AbortController();
                  const timeoutId = setTimeout(() => abortController.abort(), 30000);
                  const form = document.getElementById("discover_form");
                  const body = new URLSearchParams(new FormData(form));
                  const response = await fetch(
                      form.action,
                      {
                          method: "post",
                          headers: {
                              "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                          },
                          body: body,
                          signal: abortController.signal
                      }
                  );

                  if (response.status === 200) {
                      const text = await response.text();
                      clearTimeout(timeoutId);
                      if (text.startsWith("http") || text.startsWith("/")) {
                          // No need to hide spinner as we're navigating away
                          // fetch api doesn't expose redirects so doing a manual one
                          window.location = text;
                      } else {
                          hideSpinner();
                          discoverButton.disabled = false;
                          document.getElementById("feeds").innerHTML = text;
                          // Javascript doesn't get executed upon setting feeds.innerHTML, so setting up
                          // events here in the parent
                          setUpFeedsCallbacks();
                      }
                  } else {
                      clearTimeout(timeoutId);
                      hideSpinner();
                      discoverButton.disabled = false;
                      showInfoPopup("Something went wrong");
                  }
              } catch (err) {
                  // Timeout
                  hideSpinner();
                  discoverButton.disabled = false;
                  showInfoPopup("Something went wrong");
              }
          });
      </script>
    </div>
  <% end %>

  <script>
      function setUpFeedsCallbacks() {
          function showFeedSpinner(button) {
              if (button.classList.contains("feeds-choose-btn")) {
                  const label = button.getElementsByClassName("feeds-choose-label")[0];
                  label.classList.add("invisible");
                  const spinner = button.getElementsByClassName("feeds-choose-spinner")[0];
                  spinner.classList.remove("hidden");
                  void spinner.offsetWidth; // trigger reflow
              } else {
                  const spinner = button.parentElement.getElementsByClassName("feeds-choose-spinner")[0];
                  spinner.classList.remove("hidden");
                  void spinner.offsetWidth; // trigger reflow
              }
          }

          function hideFeedSpinner(button) {
              if (button.classList.contains("feeds-choose-btn")) {
                  const label = button.getElementsByClassName("feeds-choose-label")[0];
                  label.classList.remove("invisible");
                  const spinner = button.getElementsByClassName("feeds-choose-spinner")[0];
                  spinner.classList.add("hidden");
              } else {
                  const spinner = button.parentElement.getElementsByClassName("feeds-choose-spinner")[0];
                  spinner.classList.add("hidden");
              }
          }

          function enableFeedButton(button) {
              button.disabled = false;
              if (button.classList.contains("feeds-choose-btn")) {
                  button.classList.remove("opacity-50");
              } else {
                  button.classList.add("text-black");
                  button.classList.add("link");
                  button.classList.remove("text-gray-500");
              }
          }

          let buttons = document.getElementsByClassName("feeds-choose");
          for (let button of buttons) {
              button.addEventListener("click", async () => {
                  discoverButton.disabled = true;
                  discoverButton.classList.add("opacity-50");
                  for (let button2 of buttons) {
                      if (button2 === button && button2.classList.contains("feeds-choose-btn")) {
                          // Disable for clicking but without visuals
                          button2.disabled = true;
                      } else {
                          // Disable fully
                          disableFeedButton(button2);
                      }
                  }
                  showFeedSpinner(button);

                  try {
                      const abortController = new AbortController();
                      const timeoutId = setTimeout(() => abortController.abort(), 30000);
                      let formData = new FormData();
                      formData.append("start_feed_id", button.dataset.start_feed_id);
                      const body = new URLSearchParams(formData);
                      const response = await fetch(
                          "<%= subscriptions_path %>",
                          {
                              method: "post",
                              headers: {
                                  "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                              },
                              body: body,
                              signal: abortController.signal
                          }
                      );

                      if (response.status === 200) {
                          const text = await response.text();
                          clearTimeout(timeoutId);
                          // No need to hide spinner as we're navigating away
                          // fetch api doesn't expose redirects so doing a manual one
                          window.location = text;
                      } else if (response.status === 415) {
                          clearTimeout(timeoutId);
                          hideFeedSpinner(button);

                          const errorMessage =
                              document.getElementById(`bad_feed_${button.dataset.start_feed_id}`);
                          errorMessage.classList.remove("hidden");

                          discoverButton.disabled = false;
                          discoverButton.classList.remove("opacity-50");
                          for (let button2 of buttons) {
                              if (button2.dataset.start_feed_id === button.dataset.start_feed_id) {
                                  disableFeedButton(button2);
                              } else {
                                  enableFeedButton(button2);
                              }
                          }
                      } else {
                          clearTimeout(timeoutId);
                          discoverButton.disabled = false;
                          discoverButton.classList.remove("opacity-50");
                          hideFeedSpinner(button);
                          for (let button2 of buttons) {
                              enableFeedButton(button2);
                          }
                          showInfoPopup("Something went wrong");
                      }
                  } catch (err) {
                      // Timeout
                      discoverButton.disabled = false;
                      discoverButton.classList.remove("opacity-50");
                      hideFeedSpinner(button);
                      for (let button2 of buttons) {
                          enableFeedButton(button2);
                      }
                      showInfoPopup("Something went wrong");
                  }
              })
          }
      }
  </script>

  <div id="feeds">
    <% if @feeds_data %>
      <%= render partial: "feeds", locals: { feeds_data: @feeds_data } %>
      <script>setUpFeedsCallbacks();</script>
    <% end %>
  </div>

  <% if @suggested_categories && @miscellaneous_blogs %>
    <div id="suggestions" class="mt-10 flex flex-col gap-y-2">
      <div id="suggestions_toggle" class="max-w-lg py-2 border-y flex flex-row items-center hover:cursor-pointer no-tap-highlight">
        <div class="flex-1">Not sure what to read?</div>
        <!-- chevron-down icon -->
        <svg xmlns="http://www.w3.org/2000/svg" id="suggestions_toggle_icon" class="w-4 h-4 text-gray-500 transition-all" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
        </svg>
      </div>

      <div id="suggestions_body" class="transition-all max-h-0 overflow-hidden flex flex-col gap-y-6">
        <div>
          <div>Take a look at our picks:</div>
          <div class="text-xs text-gray-500">(not affiliated with FeedRewind)</div>
        </div>

        <%= render partial: "onboarding/suggestions",
                   locals: {
                     suggested_categories: @suggested_categories,
                     miscellaneous_blogs: @miscellaneous_blogs,
                     width_class: "max-w-full"
                   }
        %>
      </div>

      <script>
          document.getElementById("suggestions_toggle").addEventListener("click", () => {
              const suggestionsToggleIcon = document.getElementById("suggestions_toggle_icon");
              suggestionsToggleIcon.classList.toggle("rotate-180");

              const suggestionsBody = document.getElementById("suggestions_body");
              if (suggestionsBody.style.maxHeight) {
                  suggestionsBody.style.maxHeight = null;
              } else {
                  suggestionsBody.style.maxHeight = suggestionsBody.scrollHeight + "px";
              }
          });
      </script>
    </div>
  <% end %>
</div>